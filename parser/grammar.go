// Code generated by pigeon; DO NOT EDIT.

package parser

// NB: including all the imports make the parser generator run a bit more quickly.
import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/maloquacious/wsj/ast"
)

// Note: Scripts are allowed to have a shebang ("#!") start their first line.
// The script runner checks for the shebang; if present it is replaced with "//"
// before the script is parsed. This is only allowed when running scripts from
// the command line; it is not supported in the REPL or when parsing fragments.

var g = &grammar{
	rules: []*rule{
		{
			name: "Program",
			pos:  position{line: 29, col: 1, offset: 582},
			expr: &actionExpr{
				pos: position{line: 29, col: 12, offset: 593},
				run: (*parser).callonProgram1,
				expr: &seqExpr{
					pos: position{line: 29, col: 12, offset: 593},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 29, col: 12, offset: 593},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 29, col: 14, offset: 595},
							label: "stmts",
							expr: &zeroOrMoreExpr{
								pos: position{line: 29, col: 20, offset: 601},
								expr: &ruleRefExpr{
									pos:  position{line: 29, col: 20, offset: 601},
									name: "Statement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 29, col: 31, offset: 612},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Statement",
			pos:  position{line: 36, col: 1, offset: 764},
			expr: &choiceExpr{
				pos: position{line: 36, col: 14, offset: 777},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 36, col: 14, offset: 777},
						run: (*parser).callonStatement2,
						expr: &seqExpr{
							pos: position{line: 36, col: 14, offset: 777},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 36, col: 14, offset: 777},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 36, col: 16, offset: 779},
										name: "IfStmt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 36, col: 23, offset: 786},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 37, col: 13, offset: 818},
						run: (*parser).callonStatement7,
						expr: &seqExpr{
							pos: position{line: 37, col: 13, offset: 818},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 37, col: 13, offset: 818},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 37, col: 15, offset: 820},
										name: "LetStmt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 37, col: 23, offset: 828},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 13, offset: 860},
						run: (*parser).callonStatement12,
						expr: &seqExpr{
							pos: position{line: 38, col: 13, offset: 860},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 38, col: 13, offset: 860},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 38, col: 15, offset: 862},
										name: "AssignStmt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 38, col: 26, offset: 873},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 39, col: 13, offset: 905},
						run: (*parser).callonStatement17,
						expr: &seqExpr{
							pos: position{line: 39, col: 13, offset: 905},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 39, col: 13, offset: 905},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 39, col: 15, offset: 907},
										name: "BlockStmt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 39, col: 25, offset: 917},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 40, col: 13, offset: 949},
						run: (*parser).callonStatement22,
						expr: &seqExpr{
							pos: position{line: 40, col: 13, offset: 949},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 40, col: 13, offset: 949},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 40, col: 15, offset: 951},
										name: "ExprStmt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 24, offset: 960},
									name: "_",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LetStmt",
			pos:  position{line: 42, col: 1, offset: 981},
			expr: &actionExpr{
				pos: position{line: 42, col: 12, offset: 992},
				run: (*parser).callonLetStmt1,
				expr: &seqExpr{
					pos: position{line: 42, col: 12, offset: 992},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 42, col: 12, offset: 992},
							val:        "let",
							ignoreCase: false,
							want:       "\"let\"",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 998},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 20, offset: 1000},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 25, offset: 1005},
								name: "Ident",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 31, offset: 1011},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 42, col: 33, offset: 1013},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 37, offset: 1017},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 39, offset: 1019},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 45, offset: 1025},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 56, offset: 1036},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 42, col: 58, offset: 1038},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
					},
				},
			},
		},
		{
			name: "AssignStmt",
			pos:  position{line: 50, col: 1, offset: 1208},
			expr: &actionExpr{
				pos: position{line: 50, col: 15, offset: 1222},
				run: (*parser).callonAssignStmt1,
				expr: &seqExpr{
					pos: position{line: 50, col: 15, offset: 1222},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 50, col: 15, offset: 1222},
							label: "target",
							expr: &ruleRefExpr{
								pos:  position{line: 50, col: 22, offset: 1229},
								name: "Target",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 50, col: 29, offset: 1236},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 50, col: 31, offset: 1238},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 50, col: 35, offset: 1242},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 50, col: 37, offset: 1244},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 50, col: 43, offset: 1250},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 50, col: 54, offset: 1261},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 50, col: 56, offset: 1263},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
					},
				},
			},
		},
		{
			name: "IfStmt",
			pos:  position{line: 58, col: 1, offset: 1439},
			expr: &actionExpr{
				pos: position{line: 58, col: 11, offset: 1449},
				run: (*parser).callonIfStmt1,
				expr: &seqExpr{
					pos: position{line: 58, col: 11, offset: 1449},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 58, col: 11, offset: 1449},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 16, offset: 1454},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 58, col: 18, offset: 1456},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 22, offset: 1460},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 58, col: 24, offset: 1462},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 34, offset: 1472},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 45, offset: 1483},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 58, col: 47, offset: 1485},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 51, offset: 1489},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 58, col: 53, offset: 1491},
							label: "thenStmt",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 62, offset: 1500},
								name: "Statement",
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 72, offset: 1510},
							label: "elseClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 58, col: 83, offset: 1521},
								expr: &seqExpr{
									pos: position{line: 58, col: 84, offset: 1522},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 58, col: 84, offset: 1522},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 58, col: 86, offset: 1524},
											val:        "else",
											ignoreCase: false,
											want:       "\"else\"",
										},
										&ruleRefExpr{
											pos:  position{line: 58, col: 93, offset: 1531},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 58, col: 95, offset: 1533},
											label: "elseStmt",
											expr: &ruleRefExpr{
												pos:  position{line: 58, col: 104, offset: 1542},
												name: "Statement",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockStmt",
			pos:  position{line: 72, col: 1, offset: 1964},
			expr: &actionExpr{
				pos: position{line: 72, col: 14, offset: 1977},
				run: (*parser).callonBlockStmt1,
				expr: &seqExpr{
					pos: position{line: 72, col: 14, offset: 1977},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 72, col: 14, offset: 1977},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 18, offset: 1981},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 72, col: 20, offset: 1983},
							label: "stmts",
							expr: &zeroOrMoreExpr{
								pos: position{line: 72, col: 26, offset: 1989},
								expr: &ruleRefExpr{
									pos:  position{line: 72, col: 26, offset: 1989},
									name: "Statement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 37, offset: 2000},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 72, col: 39, offset: 2002},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Target",
			pos:  position{line: 79, col: 1, offset: 2156},
			expr: &actionExpr{
				pos: position{line: 79, col: 11, offset: 2166},
				run: (*parser).callonTarget1,
				expr: &seqExpr{
					pos: position{line: 79, col: 11, offset: 2166},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 79, col: 11, offset: 2166},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 16, offset: 2171},
								name: "Ident",
							},
						},
						&labeledExpr{
							pos:   position{line: 79, col: 22, offset: 2177},
							label: "suffix",
							expr: &zeroOrOneExpr{
								pos: position{line: 79, col: 29, offset: 2184},
								expr: &choiceExpr{
									pos: position{line: 79, col: 30, offset: 2185},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 79, col: 30, offset: 2185},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 79, col: 30, offset: 2185},
													name: "_",
												},
												&litMatcher{
													pos:        position{line: 79, col: 32, offset: 2187},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&ruleRefExpr{
													pos:  position{line: 79, col: 36, offset: 2191},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 79, col: 38, offset: 2193},
													name: "Ident",
												},
											},
										},
										&seqExpr{
											pos: position{line: 79, col: 46, offset: 2201},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 79, col: 46, offset: 2201},
													name: "_",
												},
												&litMatcher{
													pos:        position{line: 79, col: 48, offset: 2203},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&ruleRefExpr{
													pos:  position{line: 79, col: 52, offset: 2207},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 79, col: 54, offset: 2209},
													name: "Expression",
												},
												&ruleRefExpr{
													pos:  position{line: 79, col: 65, offset: 2220},
													name: "_",
												},
												&litMatcher{
													pos:        position{line: 79, col: 67, offset: 2222},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprStmt",
			pos:  position{line: 105, col: 1, offset: 2898},
			expr: &actionExpr{
				pos: position{line: 105, col: 13, offset: 2910},
				run: (*parser).callonExprStmt1,
				expr: &seqExpr{
					pos: position{line: 105, col: 13, offset: 2910},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 105, col: 13, offset: 2910},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 15, offset: 2912},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 26, offset: 2923},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 105, col: 28, offset: 2925},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 113, col: 1, offset: 3080},
			expr: &actionExpr{
				pos: position{line: 113, col: 15, offset: 3094},
				run: (*parser).callonExpression1,
				expr: &labeledExpr{
					pos:   position{line: 113, col: 15, offset: 3094},
					label: "eq",
					expr: &ruleRefExpr{
						pos:  position{line: 113, col: 18, offset: 3097},
						name: "Equality",
					},
				},
			},
		},
		{
			name: "Equality",
			pos:  position{line: 117, col: 1, offset: 3130},
			expr: &actionExpr{
				pos: position{line: 117, col: 13, offset: 3142},
				run: (*parser).callonEquality1,
				expr: &seqExpr{
					pos: position{line: 117, col: 13, offset: 3142},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 117, col: 13, offset: 3142},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 18, offset: 3147},
								name: "Comparison",
							},
						},
						&labeledExpr{
							pos:   position{line: 117, col: 29, offset: 3158},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 117, col: 34, offset: 3163},
								expr: &seqExpr{
									pos: position{line: 117, col: 35, offset: 3164},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 117, col: 37, offset: 3166},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 117, col: 37, offset: 3166},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 117, col: 37, offset: 3166},
															name: "_",
														},
														&litMatcher{
															pos:        position{line: 117, col: 39, offset: 3168},
															val:        "==",
															ignoreCase: false,
															want:       "\"==\"",
														},
														&ruleRefExpr{
															pos:  position{line: 117, col: 44, offset: 3173},
															name: "_",
														},
													},
												},
												&seqExpr{
													pos: position{line: 117, col: 48, offset: 3177},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 117, col: 48, offset: 3177},
															name: "_",
														},
														&litMatcher{
															pos:        position{line: 117, col: 50, offset: 3179},
															val:        "!=",
															ignoreCase: false,
															want:       "\"!=\"",
														},
														&ruleRefExpr{
															pos:  position{line: 117, col: 55, offset: 3184},
															name: "_",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 117, col: 59, offset: 3188},
											label: "right",
											expr: &ruleRefExpr{
												pos:  position{line: 117, col: 65, offset: 3194},
												name: "Comparison",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Comparison",
			pos:  position{line: 136, col: 1, offset: 3663},
			expr: &actionExpr{
				pos: position{line: 136, col: 15, offset: 3677},
				run: (*parser).callonComparison1,
				expr: &seqExpr{
					pos: position{line: 136, col: 15, offset: 3677},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 136, col: 15, offset: 3677},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 20, offset: 3682},
								name: "Term",
							},
						},
						&labeledExpr{
							pos:   position{line: 136, col: 25, offset: 3687},
							label: "rest",
							expr: &zeroOrOneExpr{
								pos: position{line: 136, col: 30, offset: 3692},
								expr: &seqExpr{
									pos: position{line: 136, col: 31, offset: 3693},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 136, col: 32, offset: 3694},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 136, col: 32, offset: 3694},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 136, col: 32, offset: 3694},
															name: "_",
														},
														&litMatcher{
															pos:        position{line: 136, col: 34, offset: 3696},
															val:        ">=",
															ignoreCase: false,
															want:       "\">=\"",
														},
														&ruleRefExpr{
															pos:  position{line: 136, col: 39, offset: 3701},
															name: "_",
														},
													},
												},
												&seqExpr{
													pos: position{line: 136, col: 43, offset: 3705},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 136, col: 43, offset: 3705},
															name: "_",
														},
														&litMatcher{
															pos:        position{line: 136, col: 45, offset: 3707},
															val:        "<=",
															ignoreCase: false,
															want:       "\"<=\"",
														},
														&ruleRefExpr{
															pos:  position{line: 136, col: 50, offset: 3712},
															name: "_",
														},
													},
												},
												&seqExpr{
													pos: position{line: 136, col: 54, offset: 3716},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 136, col: 54, offset: 3716},
															name: "_",
														},
														&litMatcher{
															pos:        position{line: 136, col: 56, offset: 3718},
															val:        ">",
															ignoreCase: false,
															want:       "\">\"",
														},
														&ruleRefExpr{
															pos:  position{line: 136, col: 60, offset: 3722},
															name: "_",
														},
													},
												},
												&seqExpr{
													pos: position{line: 136, col: 64, offset: 3726},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 136, col: 64, offset: 3726},
															name: "_",
														},
														&litMatcher{
															pos:        position{line: 136, col: 66, offset: 3728},
															val:        "<",
															ignoreCase: false,
															want:       "\"<\"",
														},
														&ruleRefExpr{
															pos:  position{line: 136, col: 70, offset: 3732},
															name: "_",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 136, col: 73, offset: 3735},
											label: "right",
											expr: &ruleRefExpr{
												pos:  position{line: 136, col: 79, offset: 3741},
												name: "Term",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Term",
			pos:  position{line: 155, col: 1, offset: 4152},
			expr: &actionExpr{
				pos: position{line: 155, col: 9, offset: 4160},
				run: (*parser).callonTerm1,
				expr: &seqExpr{
					pos: position{line: 155, col: 9, offset: 4160},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 155, col: 9, offset: 4160},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 155, col: 14, offset: 4165},
								name: "Factor",
							},
						},
						&labeledExpr{
							pos:   position{line: 155, col: 21, offset: 4172},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 155, col: 26, offset: 4177},
								expr: &seqExpr{
									pos: position{line: 155, col: 27, offset: 4178},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 155, col: 28, offset: 4179},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 155, col: 28, offset: 4179},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 155, col: 28, offset: 4179},
															name: "_",
														},
														&litMatcher{
															pos:        position{line: 155, col: 30, offset: 4181},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&ruleRefExpr{
															pos:  position{line: 155, col: 34, offset: 4185},
															name: "_",
														},
													},
												},
												&seqExpr{
													pos: position{line: 155, col: 38, offset: 4189},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 155, col: 38, offset: 4189},
															name: "_",
														},
														&litMatcher{
															pos:        position{line: 155, col: 40, offset: 4191},
															val:        "-",
															ignoreCase: false,
															want:       "\"-\"",
														},
														&ruleRefExpr{
															pos:  position{line: 155, col: 44, offset: 4195},
															name: "_",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 155, col: 47, offset: 4198},
											label: "right",
											expr: &ruleRefExpr{
												pos:  position{line: 155, col: 53, offset: 4204},
												name: "Factor",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Factor",
			pos:  position{line: 159, col: 1, offset: 4272},
			expr: &actionExpr{
				pos: position{line: 159, col: 11, offset: 4282},
				run: (*parser).callonFactor1,
				expr: &seqExpr{
					pos: position{line: 159, col: 11, offset: 4282},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 159, col: 11, offset: 4282},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 159, col: 16, offset: 4287},
								name: "Unary",
							},
						},
						&labeledExpr{
							pos:   position{line: 159, col: 22, offset: 4293},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 159, col: 27, offset: 4298},
								expr: &seqExpr{
									pos: position{line: 159, col: 28, offset: 4299},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 159, col: 29, offset: 4300},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 159, col: 29, offset: 4300},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 159, col: 29, offset: 4300},
															name: "_",
														},
														&litMatcher{
															pos:        position{line: 159, col: 31, offset: 4302},
															val:        "*",
															ignoreCase: false,
															want:       "\"*\"",
														},
														&ruleRefExpr{
															pos:  position{line: 159, col: 35, offset: 4306},
															name: "_",
														},
													},
												},
												&seqExpr{
													pos: position{line: 159, col: 39, offset: 4310},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 159, col: 39, offset: 4310},
															name: "_",
														},
														&litMatcher{
															pos:        position{line: 159, col: 41, offset: 4312},
															val:        "/",
															ignoreCase: false,
															want:       "\"/\"",
														},
														&ruleRefExpr{
															pos:  position{line: 159, col: 45, offset: 4316},
															name: "_",
														},
													},
												},
												&seqExpr{
													pos: position{line: 159, col: 49, offset: 4320},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 159, col: 49, offset: 4320},
															name: "_",
														},
														&litMatcher{
															pos:        position{line: 159, col: 51, offset: 4322},
															val:        "%",
															ignoreCase: false,
															want:       "\"%\"",
														},
														&ruleRefExpr{
															pos:  position{line: 159, col: 55, offset: 4326},
															name: "_",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 159, col: 58, offset: 4329},
											label: "right",
											expr: &ruleRefExpr{
												pos:  position{line: 159, col: 64, offset: 4335},
												name: "Unary",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Unary",
			pos:  position{line: 163, col: 1, offset: 4402},
			expr: &actionExpr{
				pos: position{line: 163, col: 10, offset: 4411},
				run: (*parser).callonUnary1,
				expr: &seqExpr{
					pos: position{line: 163, col: 10, offset: 4411},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 163, col: 10, offset: 4411},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 163, col: 13, offset: 4414},
								expr: &choiceExpr{
									pos: position{line: 163, col: 14, offset: 4415},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 163, col: 14, offset: 4415},
											val:        "-",
											ignoreCase: false,
											want:       "\"-\"",
										},
										&litMatcher{
											pos:        position{line: 163, col: 20, offset: 4421},
											val:        "!",
											ignoreCase: false,
											want:       "\"!\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 163, col: 26, offset: 4427},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 163, col: 28, offset: 4429},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 163, col: 33, offset: 4434},
								name: "PostfixExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 177, col: 1, offset: 4674},
			expr: &choiceExpr{
				pos: position{line: 177, col: 12, offset: 4685},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 177, col: 12, offset: 4685},
						run: (*parser).callonPrimary2,
						expr: &labeledExpr{
							pos:   position{line: 177, col: 12, offset: 4685},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 14, offset: 4687},
								name: "Literal",
							},
						},
					},
					&actionExpr{
						pos: position{line: 179, col: 5, offset: 4719},
						run: (*parser).callonPrimary5,
						expr: &labeledExpr{
							pos:   position{line: 179, col: 5, offset: 4719},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 179, col: 7, offset: 4721},
								name: "Ident",
							},
						},
					},
					&actionExpr{
						pos: position{line: 181, col: 5, offset: 4751},
						run: (*parser).callonPrimary8,
						expr: &seqExpr{
							pos: position{line: 181, col: 5, offset: 4751},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 181, col: 5, offset: 4751},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 181, col: 9, offset: 4755},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 181, col: 11, offset: 4757},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 13, offset: 4759},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 181, col: 24, offset: 4770},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 181, col: 26, offset: 4772},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostfixExpr",
			pos:  position{line: 185, col: 1, offset: 4799},
			expr: &actionExpr{
				pos: position{line: 185, col: 16, offset: 4814},
				run: (*parser).callonPostfixExpr1,
				expr: &seqExpr{
					pos: position{line: 185, col: 16, offset: 4814},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 185, col: 16, offset: 4814},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 21, offset: 4819},
								name: "Primary",
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 29, offset: 4827},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 185, col: 34, offset: 4832},
								expr: &ruleRefExpr{
									pos:  position{line: 185, col: 34, offset: 4832},
									name: "PostfixOp",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostfixOp",
			pos:  position{line: 190, col: 1, offset: 4948},
			expr: &choiceExpr{
				pos: position{line: 190, col: 14, offset: 4961},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 190, col: 14, offset: 4961},
						run: (*parser).callonPostfixOp2,
						expr: &labeledExpr{
							pos:   position{line: 190, col: 14, offset: 4961},
							label: "cs",
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 17, offset: 4964},
								name: "CallOp",
							},
						},
					},
					&actionExpr{
						pos: position{line: 192, col: 5, offset: 4996},
						run: (*parser).callonPostfixOp5,
						expr: &labeledExpr{
							pos:   position{line: 192, col: 5, offset: 4996},
							label: "is",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 8, offset: 4999},
								name: "IndexOp",
							},
						},
					},
					&actionExpr{
						pos: position{line: 194, col: 5, offset: 5032},
						run: (*parser).callonPostfixOp8,
						expr: &labeledExpr{
							pos:   position{line: 194, col: 5, offset: 5032},
							label: "ms",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 8, offset: 5035},
								name: "MemberOp",
							},
						},
					},
				},
			},
		},
		{
			name: "CallOp",
			pos:  position{line: 198, col: 1, offset: 5068},
			expr: &actionExpr{
				pos: position{line: 198, col: 11, offset: 5078},
				run: (*parser).callonCallOp1,
				expr: &seqExpr{
					pos: position{line: 198, col: 11, offset: 5078},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 198, col: 11, offset: 5078},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 198, col: 15, offset: 5082},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 198, col: 17, offset: 5084},
							label: "el",
							expr: &zeroOrOneExpr{
								pos: position{line: 198, col: 20, offset: 5087},
								expr: &ruleRefExpr{
									pos:  position{line: 198, col: 20, offset: 5087},
									name: "ExpressionList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 198, col: 36, offset: 5103},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 198, col: 38, offset: 5105},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IndexOp",
			pos:  position{line: 205, col: 1, offset: 5246},
			expr: &actionExpr{
				pos: position{line: 205, col: 12, offset: 5257},
				run: (*parser).callonIndexOp1,
				expr: &seqExpr{
					pos: position{line: 205, col: 12, offset: 5257},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 205, col: 12, offset: 5257},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 205, col: 16, offset: 5261},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 205, col: 18, offset: 5263},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 20, offset: 5265},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 205, col: 31, offset: 5276},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 205, col: 33, offset: 5278},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "MemberOp",
			pos:  position{line: 212, col: 1, offset: 5415},
			expr: &actionExpr{
				pos: position{line: 212, col: 13, offset: 5427},
				run: (*parser).callonMemberOp1,
				expr: &seqExpr{
					pos: position{line: 212, col: 13, offset: 5427},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 212, col: 13, offset: 5427},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&ruleRefExpr{
							pos:  position{line: 212, col: 17, offset: 5431},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 212, col: 19, offset: 5433},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 212, col: 21, offset: 5435},
								name: "Ident",
							},
						},
					},
				},
			},
		},
		{
			name: "ExpressionList",
			pos:  position{line: 219, col: 1, offset: 5576},
			expr: &actionExpr{
				pos: position{line: 219, col: 19, offset: 5594},
				run: (*parser).callonExpressionList1,
				expr: &seqExpr{
					pos: position{line: 219, col: 19, offset: 5594},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 219, col: 19, offset: 5594},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 25, offset: 5600},
								name: "Expression",
							},
						},
						&labeledExpr{
							pos:   position{line: 219, col: 36, offset: 5611},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 219, col: 41, offset: 5616},
								expr: &seqExpr{
									pos: position{line: 219, col: 42, offset: 5617},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 219, col: 42, offset: 5617},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 219, col: 44, offset: 5619},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 219, col: 48, offset: 5623},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 219, col: 50, offset: 5625},
											label: "expr",
											expr: &ruleRefExpr{
												pos:  position{line: 219, col: 55, offset: 5630},
												name: "Expression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 229, col: 1, offset: 5908},
			expr: &choiceExpr{
				pos: position{line: 229, col: 12, offset: 5919},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 229, col: 12, offset: 5919},
						run: (*parser).callonLiteral2,
						expr: &labeledExpr{
							pos:   position{line: 229, col: 12, offset: 5919},
							label: "nl",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 15, offset: 5922},
								name: "Number",
							},
						},
					},
					&actionExpr{
						pos: position{line: 231, col: 5, offset: 5954},
						run: (*parser).callonLiteral5,
						expr: &labeledExpr{
							pos:   position{line: 231, col: 5, offset: 5954},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 7, offset: 5956},
								name: "String",
							},
						},
					},
					&actionExpr{
						pos: position{line: 236, col: 5, offset: 6097},
						run: (*parser).callonLiteral8,
						expr: &litMatcher{
							pos:        position{line: 236, col: 5, offset: 6097},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
					},
					&actionExpr{
						pos: position{line: 241, col: 5, offset: 6230},
						run: (*parser).callonLiteral10,
						expr: &litMatcher{
							pos:        position{line: 241, col: 5, offset: 6230},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
					},
					&actionExpr{
						pos: position{line: 246, col: 5, offset: 6365},
						run: (*parser).callonLiteral12,
						expr: &litMatcher{
							pos:        position{line: 246, col: 5, offset: 6365},
							val:        "null",
							ignoreCase: false,
							want:       "\"null\"",
						},
					},
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 253, col: 1, offset: 6496},
			expr: &choiceExpr{
				pos: position{line: 253, col: 11, offset: 6506},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 253, col: 11, offset: 6506},
						run: (*parser).callonNumber2,
						expr: &labeledExpr{
							pos:   position{line: 253, col: 11, offset: 6506},
							label: "nl",
							expr: &ruleRefExpr{
								pos:  position{line: 253, col: 14, offset: 6509},
								name: "Float",
							},
						},
					},
					&actionExpr{
						pos: position{line: 253, col: 41, offset: 6536},
						run: (*parser).callonNumber5,
						expr: &labeledExpr{
							pos:   position{line: 253, col: 41, offset: 6536},
							label: "nl",
							expr: &ruleRefExpr{
								pos:  position{line: 253, col: 44, offset: 6539},
								name: "Int",
							},
						},
					},
				},
			},
		},
		{
			name: "Float",
			pos:  position{line: 255, col: 1, offset: 6563},
			expr: &actionExpr{
				pos: position{line: 255, col: 10, offset: 6572},
				run: (*parser).callonFloat1,
				expr: &seqExpr{
					pos: position{line: 255, col: 10, offset: 6572},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 255, col: 10, offset: 6572},
							expr: &charClassMatcher{
								pos:        position{line: 255, col: 10, offset: 6572},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 255, col: 17, offset: 6579},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 255, col: 21, offset: 6583},
							expr: &charClassMatcher{
								pos:        position{line: 255, col: 21, offset: 6583},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Int",
			pos:  position{line: 263, col: 1, offset: 6767},
			expr: &actionExpr{
				pos: position{line: 263, col: 8, offset: 6774},
				run: (*parser).callonInt1,
				expr: &oneOrMoreExpr{
					pos: position{line: 263, col: 8, offset: 6774},
					expr: &charClassMatcher{
						pos:        position{line: 263, col: 8, offset: 6774},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Ident",
			pos:  position{line: 271, col: 1, offset: 6955},
			expr: &actionExpr{
				pos: position{line: 271, col: 11, offset: 6965},
				run: (*parser).callonIdent1,
				expr: &seqExpr{
					pos: position{line: 271, col: 11, offset: 6965},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 271, col: 11, offset: 6965},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 271, col: 20, offset: 6974},
							expr: &charClassMatcher{
								pos:        position{line: 271, col: 20, offset: 6974},
								val:        "[a-zA-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 283, col: 1, offset: 7301},
			expr: &actionExpr{
				pos: position{line: 283, col: 11, offset: 7311},
				run: (*parser).callonString1,
				expr: &seqExpr{
					pos: position{line: 283, col: 11, offset: 7311},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 283, col: 11, offset: 7311},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 16, offset: 7316},
							expr: &choiceExpr{
								pos: position{line: 283, col: 18, offset: 7318},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 283, col: 18, offset: 7318},
										val:        "[^\"\\\\]",
										chars:      []rune{'"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 283, col: 27, offset: 7327},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 283, col: 27, offset: 7327},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&anyMatcher{
												line: 283, col: 32, offset: 7332,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 37, offset: 7337},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 287, col: 1, offset: 7378},
			expr: &notExpr{
				pos: position{line: 287, col: 8, offset: 7385},
				expr: &anyMatcher{
					line: 287, col: 9, offset: 7386,
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 290, col: 1, offset: 7416},
			expr: &zeroOrMoreExpr{
				pos: position{line: 290, col: 6, offset: 7421},
				expr: &choiceExpr{
					pos: position{line: 290, col: 8, offset: 7423},
					alternatives: []any{
						&charClassMatcher{
							pos:        position{line: 290, col: 8, offset: 7423},
							val:        "[ \\t\\n\\r]",
							chars:      []rune{' ', '\t', '\n', '\r'},
							ignoreCase: false,
							inverted:   false,
						},
						&ruleRefExpr{
							pos:  position{line: 290, col: 20, offset: 7435},
							name: "Comment",
						},
					},
				},
			},
		},
		{
			name: "Comment",
			pos:  position{line: 292, col: 1, offset: 7447},
			expr: &choiceExpr{
				pos: position{line: 292, col: 12, offset: 7458},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 292, col: 12, offset: 7458},
						name: "BlockComment",
					},
					&ruleRefExpr{
						pos:  position{line: 292, col: 27, offset: 7473},
						name: "LineComment",
					},
				},
			},
		},
		{
			name: "BlockComment",
			pos:  position{line: 294, col: 1, offset: 7486},
			expr: &seqExpr{
				pos: position{line: 294, col: 17, offset: 7502},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 294, col: 17, offset: 7502},
						val:        "/*",
						ignoreCase: false,
						want:       "\"/*\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 294, col: 22, offset: 7507},
						expr: &seqExpr{
							pos: position{line: 294, col: 24, offset: 7509},
							exprs: []any{
								&notExpr{
									pos: position{line: 294, col: 24, offset: 7509},
									expr: &litMatcher{
										pos:        position{line: 294, col: 25, offset: 7510},
										val:        "*/",
										ignoreCase: false,
										want:       "\"*/\"",
									},
								},
								&anyMatcher{
									line: 294, col: 30, offset: 7515,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 294, col: 35, offset: 7520},
						val:        "*/",
						ignoreCase: false,
						want:       "\"*/\"",
					},
				},
			},
		},
		{
			name: "LineComment",
			pos:  position{line: 296, col: 1, offset: 7526},
			expr: &seqExpr{
				pos: position{line: 296, col: 16, offset: 7541},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 296, col: 16, offset: 7541},
						val:        "//",
						ignoreCase: false,
						want:       "\"//\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 296, col: 21, offset: 7546},
						expr: &charClassMatcher{
							pos:        position{line: 296, col: 21, offset: 7546},
							val:        "[^\\n\\r]",
							chars:      []rune{'\n', '\r'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&choiceExpr{
						pos: position{line: 296, col: 32, offset: 7557},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 296, col: 32, offset: 7557},
								val:        "\n",
								ignoreCase: false,
								want:       "\"\\n\"",
							},
							&litMatcher{
								pos:        position{line: 296, col: 39, offset: 7564},
								val:        "\r\n",
								ignoreCase: false,
								want:       "\"\\r\\n\"",
							},
							&litMatcher{
								pos:        position{line: 296, col: 48, offset: 7573},
								val:        "\r",
								ignoreCase: false,
								want:       "\"\\r\"",
							},
							&ruleRefExpr{
								pos:  position{line: 296, col: 55, offset: 7580},
								name: "EOF",
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onProgram1(stmts any) (any, error) {
	return &ast.Program{
		Statements: coerceStatementList(stmts),
		Pos:        ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonProgram1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProgram1(stack["stmts"])
}

func (c *current) onStatement2(s any) (any, error) {
	return s, nil
}

func (p *parser) callonStatement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatement2(stack["s"])
}

func (c *current) onStatement7(s any) (any, error) {
	return s, nil
}

func (p *parser) callonStatement7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatement7(stack["s"])
}

func (c *current) onStatement12(s any) (any, error) {
	return s, nil
}

func (p *parser) callonStatement12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatement12(stack["s"])
}

func (c *current) onStatement17(s any) (any, error) {
	return s, nil
}

func (p *parser) callonStatement17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatement17(stack["s"])
}

func (c *current) onStatement22(s any) (any, error) {
	return s, nil
}

func (p *parser) callonStatement22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatement22(stack["s"])
}

func (c *current) onLetStmt1(name, value any) (any, error) {
	return &ast.LetStmt{
		Name:  name.(*ast.Ident),
		Value: value.(ast.Expr),
		Pos:   ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonLetStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetStmt1(stack["name"], stack["value"])
}

func (c *current) onAssignStmt1(target, value any) (any, error) {
	return &ast.AssignStmt{
		Target: target.(ast.Expr),
		Value:  value.(ast.Expr),
		Pos:    ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonAssignStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignStmt1(stack["target"], stack["value"])
}

func (c *current) onIfStmt1(condition, thenStmt, elseClause any) (any, error) {
	var elseStmt ast.Stmt
	if elseClause != nil {
		elseClauseSlice := elseClause.([]interface{})
		elseStmt = elseClauseSlice[3].(ast.Stmt) // skip whitespace, "else", whitespace
	}
	return &ast.IfStmt{
		Condition: condition.(ast.Expr),
		ThenStmt:  thenStmt.(ast.Stmt),
		ElseStmt:  elseStmt,
		Pos:       ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonIfStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfStmt1(stack["condition"], stack["thenStmt"], stack["elseClause"])
}

func (c *current) onBlockStmt1(stmts any) (any, error) {
	return &ast.BlockStmt{
		Statements: coerceStatementList(stmts),
		Pos:        ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonBlockStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockStmt1(stack["stmts"])
}

func (c *current) onTarget1(base, suffix any) (any, error) {
	b := base.(*ast.Ident)
	if suffix == nil {
		return b, nil
	}

	pair := suffix.([]interface{})
	switch pair[1] { // Skip leading whitespace
	case ".":
		return &ast.MemberExpr{
			Object: b,
			Name:   pair[3].(*ast.Ident), // Skip whitespace around dot
			Pos:    b.Position(),         // or use c.Pos
		}, nil
	case "[":
		return &ast.IndexExpr{
			Target: b,
			Index:  pair[3].(ast.Expr), // Skip whitespace and bracket
			Pos:    b.Position(),       // or use c.Pos
		}, nil
	default:
		return nil, fmt.Errorf("unexpected suffix operator %v", pair[1])
	}
}

func (p *parser) callonTarget1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTarget1(stack["base"], stack["suffix"])
}

func (c *current) onExprStmt1(e any) (any, error) {
	startOfExpression := e.(ast.Expr).Position()
	return &ast.ExprStmt{
		Expr: e.(ast.Expr),
		Pos:  startOfExpression,
	}, nil
}

func (p *parser) callonExprStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprStmt1(stack["e"])
}

func (c *current) onExpression1(eq any) (any, error) {
	return eq, nil
}

func (p *parser) callonExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression1(stack["eq"])
}

func (c *current) onEquality1(left, rest any) (any, error) {
	base := left.(ast.Expr)
	if rest == nil {
		return base, nil
	}

	pair := rest.([]interface{})
	opPair := pair[0].([]interface{})
	op := string(opPair[1].([]byte)) // Skip leading whitespace, convert bytes to string
	right := pair[1].(ast.Expr)

	return &ast.BinaryExpr{
		Left:     base,
		Operator: op,
		Right:    right,
		Pos:      base.Position(), // or use op position if needed
	}, nil
}

func (p *parser) callonEquality1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality1(stack["left"], stack["rest"])
}

func (c *current) onComparison1(left, rest any) (any, error) {
	l := left.(ast.Expr)
	if rest == nil {
		return l, nil
	}

	pair := rest.([]interface{})
	opPair := pair[0].([]interface{})
	op := string(opPair[1].([]byte)) // Skip leading whitespace, convert bytes to string
	r := pair[1].(ast.Expr)

	return &ast.BinaryExpr{
		Left:     l,
		Operator: op,
		Right:    r,
		Pos:      l.Position(),
	}, nil
}

func (p *parser) callonComparison1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparison1(stack["left"], stack["rest"])
}

func (c *current) onTerm1(left, rest any) (any, error) {
	return foldLeftBinary(left, rest.([]interface{}))
}

func (p *parser) callonTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTerm1(stack["left"], stack["rest"])
}

func (c *current) onFactor1(left, rest any) (any, error) {
	return foldLeftBinary(left, rest.([]interface{}))
}

func (p *parser) callonFactor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFactor1(stack["left"], stack["rest"])
}

func (c *current) onUnary1(op, expr any) (any, error) {
	e := expr.(ast.Expr)

	if op == nil {
		return e, nil
	}

	return &ast.UnaryExpr{
		Operator: op.(string),
		Expr:     e,
		Pos:      ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonUnary1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnary1(stack["op"], stack["expr"])
}

func (c *current) onPrimary2(l any) (any, error) {
	return l, nil
}

func (p *parser) callonPrimary2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary2(stack["l"])
}

func (c *current) onPrimary5(i any) (any, error) {
	return i, nil
}

func (p *parser) callonPrimary5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary5(stack["i"])
}

func (c *current) onPrimary8(e any) (any, error) {
	return e, nil
}

func (p *parser) callonPrimary8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary8(stack["e"])
}

func (c *current) onPostfixExpr1(base, rest any) (any, error) {
	suffixes := coerceSuffixList(rest)
	return ast.ApplySuffixes(base.(ast.Expr), suffixes), nil
}

func (p *parser) callonPostfixExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostfixExpr1(stack["base"], stack["rest"])
}

func (c *current) onPostfixOp2(cs any) (any, error) {
	return cs, nil
}

func (p *parser) callonPostfixOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostfixOp2(stack["cs"])
}

func (c *current) onPostfixOp5(is any) (any, error) {
	return is, nil
}

func (p *parser) callonPostfixOp5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostfixOp5(stack["is"])
}

func (c *current) onPostfixOp8(ms any) (any, error) {
	return ms, nil
}

func (p *parser) callonPostfixOp8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPostfixOp8(stack["ms"])
}

func (c *current) onCallOp1(el any) (any, error) {
	return &ast.CallSuffix{
		Args: coerceExprList(el),
		Pos:  ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonCallOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallOp1(stack["el"])
}

func (c *current) onIndexOp1(e any) (any, error) {
	return &ast.IndexSuffix{
		Index: e.(ast.Expr),
		Pos:   ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonIndexOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexOp1(stack["e"])
}

func (c *current) onMemberOp1(i any) (any, error) {
	return &ast.MemberSuffix{
		Name: i.(*ast.Ident),
		Pos:  ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonMemberOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMemberOp1(stack["i"])
}

func (c *current) onExpressionList1(first, rest any) (any, error) {
	list := []ast.Expr{first.(ast.Expr)}
	for _, item := range rest.([]interface{}) {
		pair := item.([]interface{})
		expr := pair[3].(ast.Expr) // skip whitespace, comma, whitespace
		list = append(list, expr)
	}
	return list, nil
}

func (p *parser) callonExpressionList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionList1(stack["first"], stack["rest"])
}

func (c *current) onLiteral2(nl any) (any, error) {
	return nl, nil
}

func (p *parser) callonLiteral2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral2(stack["nl"])
}

func (c *current) onLiteral5(s any) (any, error) {
	return &ast.StringLiteral{
		Value: s.(string),
		Pos:   ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonLiteral5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral5(stack["s"])
}

func (c *current) onLiteral8() (any, error) {
	return &ast.BoolLiteral{
		Value: true,
		Pos:   ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonLiteral8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral8()
}

func (c *current) onLiteral10() (any, error) {
	return &ast.BoolLiteral{
		Value: false,
		Pos:   ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonLiteral10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral10()
}

func (c *current) onLiteral12() (any, error) {
	return &ast.NullLiteral{
		Pos: ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
	return nil, nil
}

func (p *parser) callonLiteral12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral12()
}

func (c *current) onNumber2(nl any) (any, error) {
	return nl, nil
}

func (p *parser) callonNumber2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber2(stack["nl"])
}

func (c *current) onNumber5(nl any) (any, error) {
	return nl, nil
}

func (p *parser) callonNumber5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber5(stack["nl"])
}

func (c *current) onFloat1() (any, error) {
	f, err := strconv.ParseFloat(string(c.text), 64)
	return &ast.NumberLiteral{
		Value: f,
		Pos:   ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, err
}

func (p *parser) callonFloat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloat1()
}

func (c *current) onInt1() (any, error) {
	i, err := strconv.Atoi(string(c.text))
	return &ast.NumberLiteral{
		Value: int64(i),
		Pos:   ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, err
}

func (p *parser) callonInt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInt1()
}

func (c *current) onIdent1() (any, error) {
	text := string(c.text)
	switch text {
	case "let", "if", "else", "true", "false", "null":
		return nil, fmt.Errorf("reserved keyword %q cannot be used as identifier", text)
	}
	return &ast.Ident{
		Name: text,
		Pos:  ast.Pos{Line: c.pos.line, Column: c.pos.col},
	}, nil
}

func (p *parser) callonIdent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdent1()
}

func (c *current) onString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
